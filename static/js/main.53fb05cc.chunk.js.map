{"version":3,"sources":["components/takara/images/animation1.gif","components/takara/images/animation2.gif","components/takara/main.jsx","components/takara/settings.jsx","components/main/main.jsx","components/main/ErrorPage.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Page","_useState","useState","_useState2","Object","slicedToArray","Title","setTitle","_useState3","_useState4","ViewSts","setViewSts","_useState5","_useState6","TakaraName","setTakaraName","_useState7","disabled","name","_useState8","TakaraList","setTakaraList","_useState9","value","label","_useState10","AnimationName","setAnimationName","_useState11","_useState12","Animation","setAnimation","_useWindowSize","useWindowSize","width","height","_useState13","_useState14","Timeoutid","setTimeoutid","useEffect","title","localStorage","getItem","document","concat","data","JSON","parse","data2","clickTakaraNo","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","index","copy","wrap","_context","prev","next","setItem","stringify","animation1","animation2","setTimeout","reloadSelect2Page","stop","_x","apply","this","arguments","_ref2","_callee2","id","_context2","reloadMainPage","_ref3","_callee3","_context3","clearTimeout","react_default","createElement","className","CircularProgress","color","src","alt","Container","react_confetti_min_default","recycle","role","aria-label","Button","variant","onClick","fluid","size","checkResult","endCheckflg","randomno","Math","floor","random","length","i","alert","clickRandommode","map","array","buttonVariant","slice","navigate","useNavigate","AnimationList","getTitle","removeTakaralist","window","confirm","removeItem","location","reload","saveTakaralist","clickAddList","toConsumableArray","handlechangeName","e","_x2","handlechangeFlg","_x3","_x4","clasName","style","textAlign","Form","Row","Col","sm","react_select_esm","options","onChange","defaultValue","Group","Control","type","placeholder","target","controlId","Check","checked","Error","App","react_router_dom","basename","process","react_router","path","element","main_main","main","settings","ErrorPage","reportWebVitals","onPerfEntry","Function","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.53fb05cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/animation1.6acae9c3.gif\";","module.exports = __webpack_public_path__ + \"static/media/animation2.987b8d82.gif\";","import React, { useEffect, useState } from 'react';\r\nimport { Button, Container } from 'react-bootstrap';\r\nimport Confetti from 'react-confetti'\r\nimport useWindowSize from 'react-use/lib/useWindowSize'\r\nimport animation1 from \"./images/animation1.gif\";\r\nimport animation2 from \"./images/animation2.gif\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\n\r\nconst Page = () => {\r\n    // 変数定義\r\n    const [Title, setTitle] = useState(\"抽選会\")\r\n    const [ViewSts, setViewSts] = useState(\"Loading\")\r\n    const [TakaraName, setTakaraName] = useState(null)\r\n    const [TakaraList, setTakaraList] = useState(\r\n        [\r\n            { disabled: false, name: \"[サンプル]景品①\" },\r\n            { disabled: false, name: \"[サンプル]景品②\" },\r\n        ]\r\n    )\r\n    const [AnimationName, setAnimationName] = useState({ value: '1', label: 'スタンダード' })\r\n    const [Animation, setAnimation] = useState(null)\r\n    const { width, height } = useWindowSize()\r\n    const [Timeoutid, setTimeoutid] = useState(null)\r\n\r\n    // 初回処理\r\n    useEffect(() => {\r\n        let title = localStorage.getItem('takaratitle')\r\n        if (!title) {\r\n            title = \"抽選会\"\r\n        }\r\n        document.title = `${title}`\r\n        setTitle(title)\r\n        const data = JSON.parse(localStorage.getItem('takaralist'));\r\n        if (data) {\r\n            setTakaraList(data)\r\n        }\r\n        const data2 = JSON.parse(localStorage.getItem('animation'));\r\n        if (data2) {\r\n            setAnimationName(data2)\r\n        }\r\n        setViewSts(\"Main\")\r\n    }, []);\r\n\r\n    // Button Click Action\r\n    const clickTakaraNo = async (index) => {\r\n        // 抽選中画面表示\r\n        setViewSts(\"selected1\")\r\n\r\n        // フラグ書き換え・localstrage更新\r\n        const copy = TakaraList.concat()\r\n        copy[index].disabled = true\r\n        setTakaraList(copy)\r\n        localStorage.setItem('takaralist', JSON.stringify(copy));\r\n\r\n        // 景品取得・表示\r\n        setTakaraName(copy[index].name)\r\n        if (AnimationName.value === \"1\") {\r\n            setAnimation(animation1)\r\n        } else {\r\n            setAnimation(animation2)\r\n        }\r\n        setTimeout(reloadSelect2Page, 5 * 1000);\r\n    }\r\n    const clickReload = () => {\r\n        //window.location.reload(1);\r\n        reloadMainPage()\r\n    }\r\n    const clickRandommode = () => {\r\n        let checkResult = TakaraList    // 抽選実施有無の管理\r\n        let endCheckflg = false\r\n        while (true) {\r\n            // 結果登録用配列作成\r\n            const randomno = Math.floor(Math.random() * TakaraList.length);\r\n            if (TakaraList[randomno].disabled === false && TakaraList[randomno].name) {\r\n                clickTakaraNo(randomno)\r\n                break;\r\n            } else {\r\n                checkResult[randomno].disabled = true\r\n            }\r\n            for (let i = 0; i < checkResult.length; i++) {\r\n                if (checkResult[i].disabled === false) {\r\n                    break;\r\n                } else if (i === checkResult.length - 1) {\r\n                    alert(\"抽選可能な番号がありません\")\r\n                    endCheckflg = true  // whileから抜ける為のflg\r\n                    break;\r\n                }\r\n            }\r\n            if (endCheckflg === true) {\r\n                break;  // whileから抜ける\r\n            }\r\n        }\r\n    }\r\n\r\n    // ページ遷移関数\r\n    const reloadSelect2Page = async () => {\r\n        setViewSts(\"selected2\")\r\n        let id = setTimeout(reloadMainPage, 60 * 1000)\r\n        setTimeoutid(id)\r\n    }\r\n    const reloadMainPage = async () => {\r\n        clearTimeout(Timeoutid)\r\n        setTakaraName(null)\r\n        setViewSts(\"Main\")\r\n        setAnimation(null)\r\n    }\r\n\r\n    // ページレイアウト\r\n    if (ViewSts === \"Loading\") {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"Main-header\">\r\n                    <h4>Now Loading...</h4>\r\n                    <CircularProgress color=\"secondary\" />\r\n                </header>\r\n            </div>\r\n        )\r\n    } else if (ViewSts === \"selected1\") {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <div className=\"resizeimage + text-center\">\r\n                    <img src={Animation} alt=\"抽選中......\" />)\r\n                </div>\r\n            </header>\r\n        )\r\n    } else if (ViewSts === \"selected2\") {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <Container>\r\n                    <Confetti\r\n                        width={width}\r\n                        height={height}\r\n                        recycle={true}\r\n                    />\r\n                    <h2><span role=\"img\" aria-label=\"cracker\">🎉🎉抽 選 結 果🎉🎉</span></h2>\r\n                    <h3>{TakaraName}</h3>\r\n                </Container>\r\n                <Button variant=\"button\" className=\"text-muted\" onClick={clickReload}>メインページへ</Button>\r\n            </header>\r\n        )\r\n    } else if (ViewSts === \"Main\") {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <Container fluid className=\"center\">\r\n                        <h2 className=\"mt-2\"><span>{Title}</span></h2>\r\n                        <div className=\"mb-2\">\r\n                            < Button variant=\"danger\" size=\"lg\" onClick={() => clickRandommode()}>神様にまかせるボタン</Button>\r\n                        </div>\r\n                        <div className=\"text-center\">\r\n                            {TakaraList.map(function (value, index, array) {\r\n                                let buttonVariant\r\n                                if (index % 2 === 0) {\r\n                                    buttonVariant = \"btn-circle-3d-1\"\r\n                                } else {\r\n                                    buttonVariant = \"btn-circle-3d-2\"\r\n                                }\r\n                                if (value.disabled === false && value.name) {\r\n                                    return (\r\n                                        < button className={buttonVariant} onClick={() => clickTakaraNo(index)}>{('00' + (index + 1)).slice(-3)}</button>\r\n                                    )\r\n                                } else {\r\n                                    return (\r\n                                        < button className=\"btn-circle-3d-gray\" disabled>{('00' + (index + 1)).slice(-3)}</button>\r\n                                    )\r\n                                }\r\n                            })}\r\n                        </div>\r\n                    </Container>\r\n                </header >\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Page","import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Button, Container, Col, Form, Row } from 'react-bootstrap';\r\nimport Select from 'react-select'\r\n\r\nconst Page = () => {\r\n    // 変数定義\r\n    const [Title, setTitle] = useState(\"抽選会\")\r\n    document.title = `抽選会 - 設定`\r\n    const navigate = useNavigate()\r\n    const [TakaraList, setTakaraList] = useState(\r\n        [\r\n            { disabled: false, name: \"[サンプル]景品①\" },\r\n            { disabled: false, name: \"[サンプル]景品②\" },\r\n        ]\r\n    )\r\n    const [AnimationList,] = useState([{ value: '1', label: 'スタンダード' }, { value: '2', label: 'オリジナル' }])\r\n    const [AnimationName, setAnimationName] = useState(AnimationList[0])\r\n\r\n    // 初回処理\r\n    useEffect(() => {\r\n        // 抽選ページ タイトル取得\r\n        let getTitle = localStorage.getItem('takaratitle')\r\n        if (!getTitle) {\r\n            getTitle = \"抽選会\"\r\n        }\r\n        setTitle(getTitle)\r\n        // 抽選リスト取得\r\n        const data = JSON.parse(localStorage.getItem('takaralist'));\r\n        if (data) {\r\n            setTakaraList(data)\r\n        }\r\n        // 抽選中アニメーション選択\r\n        const data2 = JSON.parse(localStorage.getItem('animation'));\r\n        if (data2) {\r\n            setAnimationName(data2)\r\n        }\r\n    }, []);\r\n\r\n    // Button Click Action\r\n    const removeTakaralist = () => {\r\n        const result = window.confirm('本当によろしいですか？');\r\n        if (result === true) {\r\n            localStorage.removeItem(\"takaralist\");\r\n            localStorage.removeItem(\"takaratitle\");\r\n            localStorage.removeItem(\"animation\");\r\n            window.location.reload();\r\n        }\r\n    }\r\n    const saveTakaralist = () => {\r\n        localStorage.setItem('takaralist', JSON.stringify(TakaraList));\r\n        localStorage.setItem('animation', JSON.stringify(AnimationName));\r\n        localStorage.setItem('takaratitle', Title);\r\n        const result = window.confirm('保存成功! MainPageに遷移しますか？');\r\n        if (result === true) {\r\n            navigate(\"/\");\r\n        }\r\n    }\r\n    const clickAddList = async () => {\r\n        setTakaraList([...TakaraList, { disabled: false, name: null }]);\r\n    }\r\n    const handlechangeName = async (e, index) => {\r\n        const copy = TakaraList.concat()\r\n        copy[index].name = e\r\n        setTakaraList(copy)\r\n    }\r\n    const handlechangeFlg = async (e, index) => {\r\n        const copy = TakaraList.concat()\r\n        copy[index].disabled = e\r\n        setTakaraList(copy)\r\n    }\r\n\r\n    // ページレイアウト\r\n    return (\r\n        <div className=\"App\">\r\n            <header clasName=\"App-header\">\r\n                <Container className=\"center\">\r\n                    <h2 className=\"mt-2\"><span>設定</span></h2>\r\n                    < Button variant=\"info\" size=\"lg\" onClick={() => clickAddList()}>++ 追加 ++</Button>\r\n                    < Button variant=\"info\" size=\"lg\" onClick={() => saveTakaralist()}>保存</Button>\r\n                    < Button variant=\"info\" size=\"lg\" onClick={() => removeTakaralist()}>全項目削除</Button>\r\n                    <div className=\"card\" style={{ textAlign: \"left\" }}>\r\n                        <Form>\r\n                            <Row>\r\n                                <Col sm={1}>抽選中画面</Col>\r\n                                <Col sm={4}>\r\n                                    <Select\r\n                                        options={AnimationList}\r\n                                        onChange={e => setAnimationName(e)}\r\n                                        //placeholder=\"Select Category...\"\r\n                                        //isClearable={true}\r\n                                        //isSearchable={true}\r\n                                        //isLoading={LoadFlg}\r\n                                        defaultValue={AnimationName}\r\n                                        //isDisabled={query.flg !== undefined ? true : false}\r\n                                        value={AnimationName}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col sm={1}>タイトル</Col>\r\n                                <Col sm={4}>\r\n                                    <Form.Group className=\"mb-3 + ml-2\">\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            placeholder=\"タイトル\"\r\n                                            onChange={e => setTitle(e.target.value)}\r\n                                            value={Title}\r\n                                        />\r\n                                    </Form.Group>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col sm={1}>No</Col>\r\n                                <Col sm={4}>景品名</Col>\r\n                                <Col sm={1}>終了</Col>\r\n                            </Row>\r\n                            {TakaraList.map(function (value, index, array) {\r\n                                return (\r\n                                    <Row>\r\n                                        <Col sm={1}>{index + 1}</Col>\r\n                                        <Col sm={4}>\r\n                                            <Form.Group className=\"mb-3 + ml-2\">\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    placeholder=\"景品名\"\r\n                                                    onChange={e => handlechangeName(e.target.value, index)}\r\n                                                    value={value.name}\r\n                                                />\r\n                                            </Form.Group>\r\n                                        </Col>\r\n\r\n                                        <Col sm={1}>\r\n                                            <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\r\n                                                <Form.Check\r\n                                                    type=\"checkbox\"\r\n                                                    //label=\"終了\"\r\n                                                    onChange={e => handlechangeFlg(e.target.checked, index)}\r\n                                                    checked={value.disabled}\r\n                                                />\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                    </Row>\r\n                                )\r\n                            })}\r\n                        </Form>\r\n                    </div>\r\n                    < Button variant=\"info\" size=\"lg\" onClick={() => clickAddList()}>++ 追加 ++</Button>\r\n                    < Button variant=\"info\" size=\"lg\" onClick={() => saveTakaralist()}>保存</Button>\r\n                    < Button variant=\"info\" size=\"lg\" onClick={() => removeTakaralist()}>全項目削除</Button>\r\n                </Container>\r\n            </header>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Page","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Button, Container } from 'react-bootstrap';\r\n\r\nconst Page = () => {\r\n    // 変数定義\r\nconst navigate = useNavigate();\r\n    let title = \"Home - 抽選会\"\r\n    document.title = `${title}`\r\n\r\n    // Button Click Action\r\n    const clickMainPage = () => {\r\n        navigate(\"/main\");\r\n    }\r\n    const clickSettingPage = () => {\r\n        navigate(\"/setting\");\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <Container>\r\n                    <h2 className=\"mt-2\"><span>{title}</span></h2>\r\n                    <div className=\"text-center\">\r\n                        < Button variant=\"info\" size=\"lg\" onClick={() => clickMainPage()}>抽選Pageへ</Button>\r\n                        < Button variant=\"info\" size=\"lg\" onClick={() => clickSettingPage()}>設定Pageへ</Button>\r\n                    </div>\r\n                </Container>\r\n            </header >\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Page","import React from 'react';\r\n\r\nconst Error = () => {\r\n\r\n  return (\r\n    <div>\r\n      <h1>404</h1>\r\n      <p>Sorry, the page you're looking con not found.</p>\r\n    </div>\r\n  )\r\n}\r\nexport default Error;","import React from 'react';\r\nimport { BrowserRouter , Routes, Route } from 'react-router-dom';\r\nimport { MainPage, SettingPage } from './components/takara';\r\nimport { ErrorPage, HomePage } from './components/main';\r\nimport \"./App.css\";\r\nconst App = () => {\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <Routes>\r\n        <Route path='/' element={<HomePage />} />\r\n        <Route path='/main' element={<MainPage />} />\r\n        <Route path='/setting' element={<SettingPage />} />\r\n        <Route path='/*' element={<ErrorPage/>} /> {/*not foundの時*/}\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}