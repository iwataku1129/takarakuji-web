{"version":3,"sources":["components/takara/main.jsx","components/takara/settings.jsx","components/main/main.jsx","components/main/ErrorPage.jsx","App.jsx","reportWebVitals.js","index.js","components/takara/images/animation1.gif"],"names":["Page","_useState","useState","_useState2","Object","slicedToArray","Title","setTitle","_useState3","_useState4","ViewSts","setViewSts","_useState5","_useState6","TakaraName","setTakaraName","_useState7","disabled","name","_useState8","TakaraList","setTakaraList","_useState9","value","label","_useState10","AnimationName","setAnimationName","_useWindowSize","useWindowSize","width","height","_useState11","_useState12","Timeoutid","setTimeoutid","useEffect","title","localStorage","getItem","document","concat","data","JSON","parse","data2","clickTakaraNo","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","index","copy","wrap","_context","prev","next","setItem","stringify","setTimeout","reloadSelect2Page","stop","_x","apply","this","arguments","_ref2","_callee2","id","_context2","reloadMainPage","_ref3","_callee3","_context3","clearTimeout","react_default","createElement","className","CircularProgress","color","src","animation1","alt","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","dist_default","options","isClickToPauseDisabled","Container","react_confetti_min_default","recycle","role","aria-label","Button","variant","onClick","fluid","size","checkResult","endCheckflg","randomno","Math","floor","random","length","i","alert","clickRandommode","map","array","buttonVariant","slice","navigate","useNavigate","AnimationList","removeTakaralist","window","confirm","removeItem","location","reload","saveTakaralist","clickAddList","toConsumableArray","handlechangeName","e","_x2","handlechangeFlg","_x3","_x4","clasName","style","textAlign","Form","Row","Col","sm","react_select_esm","onChange","defaultValue","Group","Control","type","placeholder","target","controlId","Check","checked","Error","App","react_router_dom","basename","process","react_router","path","element","main_main","main","settings","ErrorPage","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App_0","getElementById","module","exports","p"],"mappings":"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","file":"static/js/main.b445d4c0.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Button, Container } from 'react-bootstrap';\r\nimport Confetti from 'react-confetti'\r\nimport useWindowSize from 'react-use/lib/useWindowSize'\r\nimport animation1 from \"./images/animation1.gif\";\r\n//import animation2 from \"./images/animation2.gif\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"./images/animation2.json\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\n\r\nconst Page = () => {\r\n    // 変数定義\r\n    const [Title, setTitle] = useState(\"抽選会\")\r\n    const [ViewSts, setViewSts] = useState(\"Loading\")\r\n    const [TakaraName, setTakaraName] = useState(null)\r\n    const [TakaraList, setTakaraList] = useState(\r\n        [\r\n            { disabled: false, name: \"[サンプル]景品①\" },\r\n            { disabled: false, name: \"[サンプル]景品②\" },\r\n        ]\r\n    )\r\n    const [AnimationName, setAnimationName] = useState({ value: '1', label: 'スタンダード' })\r\n    const { width, height } = useWindowSize()\r\n    const [Timeoutid, setTimeoutid] = useState(null)\r\n\r\n    // 初回処理\r\n    useEffect(() => {\r\n        let title = localStorage.getItem('takaratitle')\r\n        if (!title) {\r\n            title = \"抽選会\"\r\n        }\r\n        document.title = `${title}`\r\n        setTitle(title)\r\n\r\n        const data = JSON.parse(localStorage.getItem('takaralist'));\r\n        if (data) {\r\n            setTakaraList(data)\r\n        }\r\n        const data2 = JSON.parse(localStorage.getItem('animation'));\r\n        if (data2) {\r\n            setAnimationName(data2)\r\n        }\r\n        setViewSts(\"Main\")\r\n    }, []);\r\n\r\n    // Button Click Action\r\n    const clickTakaraNo = async (index) => {\r\n        // 抽選中画面表示\r\n        setViewSts(\"selected1\")\r\n\r\n        // フラグ書き換え・localstrage更新\r\n        const copy = TakaraList.concat()\r\n        copy[index].disabled = true\r\n        setTakaraList(copy)\r\n        localStorage.setItem('takaralist', JSON.stringify(copy));\r\n\r\n        // 景品取得・表示\r\n        setTakaraName(copy[index].name)\r\n        setTimeout(reloadSelect2Page, 6 * 1000);\r\n    }\r\n    const clickReload = () => {\r\n        //window.location.reload(1);\r\n        reloadMainPage()\r\n    }\r\n    const clickRandommode = () => {\r\n        let checkResult = TakaraList    // 抽選実施有無の管理\r\n        let endCheckflg = false\r\n        while (true) {\r\n            // 結果登録用配列作成\r\n            const randomno = Math.floor(Math.random() * TakaraList.length);\r\n            if (TakaraList[randomno].disabled === false && TakaraList[randomno].name) {\r\n                clickTakaraNo(randomno)\r\n                break;\r\n            } else {\r\n                checkResult[randomno].disabled = true\r\n            }\r\n            for (let i = 0; i < checkResult.length; i++) {\r\n                if (checkResult[i].disabled === false) {\r\n                    break;\r\n                } else if (i === checkResult.length - 1) {\r\n                    alert(\"抽選可能な番号がありません\")\r\n                    endCheckflg = true  // whileから抜ける為のflg\r\n                    break;\r\n                }\r\n            }\r\n            if (endCheckflg === true) {\r\n                break;  // whileから抜ける\r\n            }\r\n        }\r\n    }\r\n\r\n    // ページ遷移関数\r\n    const reloadSelect2Page = async () => {\r\n        setViewSts(\"selected2\")\r\n        let id = setTimeout(reloadMainPage, 60 * 1000)\r\n        setTimeoutid(id)\r\n    }\r\n    const reloadMainPage = async () => {\r\n        clearTimeout(Timeoutid)\r\n        setTakaraName(null)\r\n        setViewSts(\"Main\")\r\n    }\r\n\r\n    // ページレイアウト\r\n    if (ViewSts === \"Loading\") {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"Main-header\">\r\n                    <h4>Now Loading...</h4>\r\n                    <CircularProgress color=\"secondary\" />\r\n                </header>\r\n            </div>\r\n        )\r\n    } else if (ViewSts === \"selected1\") {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <div className=\"resizeimage + text-center\">\r\n                    {(() => {\r\n                        if (AnimationName.value === '1') {\r\n                            return (<img src={animation1} alt=\"抽選中......\" />)\r\n                        } else {\r\n                            //return (<img src={animation2} alt=\"抽選中......\" />)\r\n                            const defaultOptions = {\r\n                                loop: false,\r\n                                autoplay: true,\r\n                                animationData,\r\n                                rendererSettings: {\r\n                                    preserveAspectRatio: \"xMidYMid slice\"\r\n                                }\r\n                            };\r\n                            return (<Lottie options={defaultOptions} isClickToPauseDisabled={true} />)\r\n                        }\r\n                    })()}\r\n                </div>\r\n            </header>\r\n        )\r\n    } else if (ViewSts === \"selected2\") {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <Container>\r\n                    <Confetti\r\n                        width={width}\r\n                        height={height}\r\n                        recycle={true}\r\n                    />\r\n                    <h2><span role=\"img\" aria-label=\"cracker\">🎉🎉抽 選 結 果🎉🎉</span></h2>\r\n                    <h3>{TakaraName}</h3>\r\n                </Container>\r\n                <Button variant=\"button\" className=\"text-muted\" onClick={clickReload}>メインページへ</Button>\r\n            </header>\r\n        )\r\n    } else if (ViewSts === \"Main\") {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <Container fluid className=\"center\">\r\n                        <h2 className=\"mt-2\"><span>{Title}</span></h2>\r\n                        <div className=\"mb-2\">\r\n                            < Button variant=\"danger\" size=\"lg\" onClick={() => clickRandommode()}>神様にまかせるボタン</Button>\r\n                        </div>\r\n                        <div className=\"text-center\">\r\n                            {TakaraList.map(function (value, index, array) {\r\n                                let buttonVariant\r\n                                if (index % 2 === 0) {\r\n                                    buttonVariant = \"btn-circle-3d-1\"\r\n                                } else {\r\n                                    buttonVariant = \"btn-circle-3d-2\"\r\n                                }\r\n                                if (value.disabled === false && value.name) {\r\n                                    return (\r\n                                        < button className={buttonVariant} onClick={() => clickTakaraNo(index)}>{('00' + (index + 1)).slice(-3)}</button>\r\n                                    )\r\n                                } else {\r\n                                    return (\r\n                                        < button className=\"btn-circle-3d-gray\" disabled>{('00' + (index + 1)).slice(-3)}</button>\r\n                                    )\r\n                                }\r\n                            })}\r\n                        </div>\r\n                    </Container>\r\n                </header >\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Page","import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Button, Container, Col, Form, Row } from 'react-bootstrap';\r\nimport Select from 'react-select'\r\n\r\nconst Page = () => {\r\n    // 変数定義\r\n    const [Title, setTitle] = useState(\"抽選会\")\r\n    const navigate = useNavigate()\r\n    const [TakaraList, setTakaraList] = useState(\r\n        [\r\n            { disabled: false, name: \"[サンプル]景品①\" },\r\n            { disabled: false, name: \"[サンプル]景品②\" },\r\n        ]\r\n    )\r\n    const [AnimationList, ] = useState([{ value: '1', label: 'スタンダード' }, { value: '2', label: 'オリジナル' }])\r\n    const [AnimationName, setAnimationName] = useState(AnimationList[0])\r\n\r\n    // 初回処理\r\n    useEffect(() => {\r\n        let title = localStorage.getItem('takaratitle')\r\n        if (!title) {\r\n            title = \"抽選会\"\r\n        }\r\n        document.title = `${title}`\r\n        setTitle(title)\r\n        \r\n        // 抽選リスト取得\r\n        const data = JSON.parse(localStorage.getItem('takaralist'));\r\n        if (data) {\r\n            setTakaraList(data)\r\n        }\r\n        // 抽選中アニメーション選択\r\n        const data2 = JSON.parse(localStorage.getItem('animation'));\r\n        if (data2) {\r\n            setAnimationName(data2)\r\n        }\r\n    }, []);\r\n\r\n    // Button Click Action\r\n    const removeTakaralist = () => {\r\n        const result = window.confirm('本当によろしいですか？');\r\n        if (result === true) {\r\n            localStorage.removeItem(\"takaralist\");\r\n            localStorage.removeItem(\"takaratitle\");\r\n            localStorage.removeItem(\"animation\");\r\n            window.location.reload();\r\n        }\r\n    }\r\n    const saveTakaralist = () => {\r\n        localStorage.setItem('takaralist', JSON.stringify(TakaraList));\r\n        localStorage.setItem('animation', JSON.stringify(AnimationName));\r\n        localStorage.setItem('takaratitle', Title);\r\n        const result = window.confirm('保存成功! MainPageに遷移しますか？');\r\n        if (result === true) {\r\n            navigate(\"/\");\r\n        }\r\n    }\r\n    const clickAddList = async () => {\r\n        setTakaraList([...TakaraList, { disabled: false, name: null }]);\r\n    }\r\n    const handlechangeName = async (e, index) => {\r\n        const copy = TakaraList.concat()\r\n        copy[index].name = e\r\n        setTakaraList(copy)\r\n    }\r\n    const handlechangeFlg = async (e, index) => {\r\n        const copy = TakaraList.concat()\r\n        copy[index].disabled = e\r\n        setTakaraList(copy)\r\n    }\r\n\r\n    // ページレイアウト\r\n    return (\r\n        <div className=\"App\">\r\n            <header clasName=\"App-header\">\r\n                <Container className=\"center\">\r\n                    <h2 className=\"mt-2\"><span>設定</span></h2>\r\n                    < Button variant=\"info\" size=\"lg\" onClick={() => clickAddList()}>++ 追加 ++</Button>\r\n                    < Button variant=\"info\" size=\"lg\" onClick={() => saveTakaralist()}>保存</Button>\r\n                    < Button variant=\"info\" size=\"lg\" onClick={() => removeTakaralist()}>全項目削除</Button>\r\n                    <div className=\"card\" style={{ textAlign: \"left\" }}>\r\n                        <Form>\r\n                            <Row>\r\n                                <Col sm={1}>抽選中画面</Col>\r\n                                <Col sm={4}>\r\n                                    <Select\r\n                                        options={AnimationList}\r\n                                        onChange={e => setAnimationName(e)}\r\n                                        //placeholder=\"Select Category...\"\r\n                                        //isClearable={true}\r\n                                        //isSearchable={true}\r\n                                        //isLoading={LoadFlg}\r\n                                        defaultValue={AnimationName}\r\n                                        //isDisabled={query.flg !== undefined ? true : false}\r\n                                        value={AnimationName}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col sm={1}>タイトル</Col>\r\n                                <Col sm={4}>\r\n                                    <Form.Group className=\"mb-3 + ml-2\">\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            placeholder=\"タイトル\"\r\n                                            onChange={e => setTitle(e.target.value)}\r\n                                            value={Title}\r\n                                        />\r\n                                    </Form.Group>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col sm={1}>No</Col>\r\n                                <Col sm={4}>景品名</Col>\r\n                                <Col sm={1}>終了</Col>\r\n                            </Row>\r\n                            {TakaraList.map(function (value, index, array) {\r\n                                return (\r\n                                    <Row>\r\n                                        <Col sm={1}>{index + 1}</Col>\r\n                                        <Col sm={4}>\r\n                                            <Form.Group className=\"mb-3 + ml-2\">\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    placeholder=\"景品名\"\r\n                                                    onChange={e => handlechangeName(e.target.value, index)}\r\n                                                    value={value.name}\r\n                                                />\r\n                                            </Form.Group>\r\n                                        </Col>\r\n\r\n                                        <Col sm={1}>\r\n                                            <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\r\n                                                <Form.Check\r\n                                                    type=\"checkbox\"\r\n                                                    //label=\"終了\"\r\n                                                    onChange={e => handlechangeFlg(e.target.checked, index)}\r\n                                                    checked={value.disabled}\r\n                                                />\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                    </Row>\r\n                                )\r\n                            })}\r\n                        </Form>\r\n                    </div>\r\n                    < Button variant=\"info\" size=\"lg\" onClick={() => clickAddList()}>++ 追加 ++</Button>\r\n                    < Button variant=\"info\" size=\"lg\" onClick={() => saveTakaralist()}>保存</Button>\r\n                    < Button variant=\"info\" size=\"lg\" onClick={() => removeTakaralist()}>全項目削除</Button>\r\n                </Container>\r\n            </header>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Page","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Button, Container } from 'react-bootstrap';\r\n\r\nconst Page = () => {\r\n    // 変数定義\r\nconst navigate = useNavigate();\r\n    let title = \"Home - 抽選会\"\r\n    document.title = `${title}`\r\n\r\n    // Button Click Action\r\n    const clickMainPage = () => {\r\n        navigate(\"/main\");\r\n    }\r\n    const clickSettingPage = () => {\r\n        navigate(\"/setting\");\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <Container>\r\n                    <h2 className=\"mt-2\"><span>{title}</span></h2>\r\n                    <div className=\"text-center\">\r\n                        < Button variant=\"info\" size=\"lg\" onClick={() => clickMainPage()}>抽選Pageへ</Button>\r\n                        < Button variant=\"info\" size=\"lg\" onClick={() => clickSettingPage()}>設定Pageへ</Button>\r\n                    </div>\r\n                </Container>\r\n            </header >\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Page","import React from 'react';\r\n\r\nconst Error = () => {\r\n\r\n  return (\r\n    <div>\r\n      <h1>404</h1>\r\n      <p>Sorry, the page you're looking con not found.</p>\r\n    </div>\r\n  )\r\n}\r\nexport default Error;","import React from 'react';\r\nimport { BrowserRouter , Routes, Route } from 'react-router-dom';\r\nimport { MainPage, SettingPage } from './components/takara';\r\nimport { ErrorPage, HomePage } from './components/main';\r\nimport \"./App.css\";\r\nconst App = () => {\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <Routes>\r\n        <Route path='/' element={<HomePage />} />\r\n        <Route path='/main' element={<MainPage />} />\r\n        <Route path='/setting' element={<SettingPage />} />\r\n        <Route path='/*' element={<ErrorPage/>} /> {/*not foundの時*/}\r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","module.exports = __webpack_public_path__ + \"static/media/animation1.6acae9c3.gif\";"],"sourceRoot":""}